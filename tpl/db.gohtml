
import (
  "github.com/go-xorm/xorm"
  "github.com/runner-mei/orm"
)

type DB struct {
  Engine *xorm.Engine
}

func (db *DB) WithSession(sess *xorm.Session) *DB {
  return &DB{Engine: db.Engine, session: sess}
}

func (db *DB) Begin() (*DB, error) {
  if db.session != nil {
    return nil, errors.New("run in the transaction")
  }
  session := db.Engine.NewSession()
  return &DB{Engine: db.Engine, session: session}, nil
}

func (db *DB) Commit() error {
  if db.session == nil {
    return sql.ErrTxDone
  }
  err := db.session.Commit()
  db.session = nil
  return err
}

func (db *DB) Rollback() error {
  if db.session == nil {
    return sql.ErrTxDone
  }
  err := db.session.Rollback()
  db.session = nil
  return err
}

func (db *DB) Close() error {
  if db.session == nil {
    return sql.ErrTxDone
  }
  err := db.session.Close()
  db.session = nil
  return err
}

func (db *DB) Query(sqlStr string, args ...interface{}) orm.Queryer {
  return orm.NewWithNoInstance()(db.Engine).
  WithSession(db.session).
  Query(sqlStr, args...)
}

[[- range $class := .classes]]
func (db *DB) [[pluralize $class.Name]]() *orm.Collection {
  return orm.New(func() interface{}{
    return &[[$class.Name]]{}
  })(db.Engine).WithSession(db.session)
}
[[- end]]

func DropTables(engine *xorm.Engine) error {
  beans := []interface{}{[[range $class := .classes]]
    &[[$class.Name]]{},[[end]]
  }

  for _, bean := range beans {
    if err := engine.DropIndexes(bean); err != nil {
      if !strings.Contains(err.Error(), "does not exist") &&
      !strings.Contains(err.Error(), "不存在") {
        return err
      }
    }
  }

  return engine.DropTables(beans...)
}

func InitTables(engine *xorm.Engine) error {
  beans := []interface{}{[[range $class := .classes]]
    &[[$class.Name]]{},[[end]]
  }

  if err := engine.CreateTables(beans...); err != nil {
    return err
  }

  for _, bean := range beans {
    if err := engine.CreateIndexes(bean); err != nil {
      if !strings.Contains(err.Error(), "already exists") &&
         !strings.Contains(err.Error(), "已经存在") {
        return err
      }
      revel.WARN.Println(err)
    }

    if err := engine.CreateUniques(bean); err != nil {
      if !(strings.Contains(err.Error(), "already exists") ||
        strings.Contains(err.Error(), "已经存在")) &&
        !(strings.Contains(err.Error(), "create unique index") ||
          strings.Contains(err.Error(), "UQE_")) {
        return err
      }
      revel.WARN.Println(err)
    }
  }
  return nil
}
