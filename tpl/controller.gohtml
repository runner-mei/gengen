import (
  "[[.projectPath]]/app"
  "[[.projectPath]]/app/libs"
  "[[.projectPath]]/app/models"
  "[[.projectPath]]/app/routes"

  "github.com/revel/revel"
  "upper.io/db.v3"
)

// [[.controllerName]] - 控制器
type [[.controllerName]] struct {
  [[if .baseController]][[.baseController]][[else]]*revel.Controller[[end]]
}

// 列出所有记录
func (c [[.controllerName]]) Index(pageIndex int) revel.Result {
  //var exprs []db.Expr
  //if "" != name {
  //  exprs = append(exprs, models.[[.class.Name]]s.C.NAME.LIKE("%"+name+"%"))
  //}


  total, err := c.Lifecycle.DB.[[.modelName]]().Where().Count()
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Render(err)
  }

  var [[camelizeDownFirst .modelName]] []models.[[.class.Name]]
  err = c.Lifecycle.DB.[[.modelName]]().Where().
    Limit(libs.DEFAULT_SIZE_PER_PAGE).
    Offset(pageIndex * libs.DEFAULT_SIZE_PER_PAGE).
    All(&[[camelizeDownFirst .modelName]])
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Render()
  }
  paginator := libs.NewPaginator(c.Request.Request, libs.DEFAULT_SIZE_PER_PAGE, total)
  return c.Render([[camelizeDownFirst .modelName]], paginator)
}

// 编辑新建记录
func (c [[.controllerName]]) New() revel.Result {
  return c.Render()
}

// 创建记录
func (c [[.controllerName]]) Create([[camelizeDownFirst .class.Name]] *models.[[.class.Name]]) revel.Result {
  if [[camelizeDownFirst .class.Name]].Validate(c.Validation) {
    c.Validation.Keep()
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].New())
  }

  _, err := c.Lifecycle.DB.[[.modelName]]().Insert([[camelizeDownFirst .class.Name]])
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].New())
  }

  c.Flash.Success(revel.Message(c.Request.Locale, "insert.success"))
  return c.Redirect(routes.[[.controllerName]].Index(0))
}

// 编辑指定 id 的记录
func (c [[.controllerName]]) Edit(id int64) revel.Result {
  var [[camelizeDownFirst .class.Name]] models.[[.class.Name]]
  err := c.Lifecycle.DB.[[.modelName]]().Id(id).Get(&[[camelizeDownFirst .class.Name]])
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Index(0))
  }
  return c.Render([[camelizeDownFirst .class.Name]])
}


// 按 id 更新记录
func (c [[.controllerName]]) Update([[camelizeDownFirst .class.Name]] *models.[[.class.Name]]) revel.Result {
  if [[camelizeDownFirst .class.Name]].Validate(c.Validation) {
    c.Validation.Keep()
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Edit(int64([[camelizeDownFirst .class.Name]].ID)))
  }

  err := c.Lifecycle.DB.[[.modelName]]().Id([[camelizeDownFirst .class.Name]].ID).Update([[camelizeDownFirst .class.Name]])
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Edit(int64([[camelizeDownFirst .class.Name]].ID)))
  }
  c.Flash.Success(revel.Message(c.Request.Locale, "update.success"))
  return c.Redirect(routes.[[.controllerName]].Index(0))
}

// 按 id 删除记录
func (c [[.controllerName]]) Delete(id int64) revel.Result {
  err :=  c.Lifecycle.DB.[[.modelName]]().Id(id).Delete()
  if nil != err {
    c.Flash.Error(err.Error())
  } else {
    c.Flash.Success(revel.Message(c.Request.Locale, "delete.success"))
  }
  return c.Redirect([[.controllerName]].Index)
}

// 按 id 列表删除记录
func (c [[.controllerName]]) DeleteByIDs(id_list []int64) revel.Result {
  _, err :=  c.Lifecycle.DB.[[.modelName]]().Where().And("id IN (?)", id_list).Delete()
  if nil != err {
    return c.RenderError(err)
  } else {
    return c.RenderJson(revel.Message(c.Request.Locale, "delete.success"))
  }
}