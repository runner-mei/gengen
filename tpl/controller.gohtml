[[$modelName := .modelName -]][[$class := .class -]]
import (
  "[[.projectPath]]/app"
  "[[.projectPath]]/app/libs"
  "[[.projectPath]]/app/models"
  "[[.projectPath]]/app/routes"

  "github.com/revel/revel"
  "github.com/three-plus-three/forms"
  "github.com/three-plus-three/modules/toolbox"
  "github.com/runner-mei/orm"
  "upper.io/db.v3"
)

[[set . "hasEnumerations" false]]
[[- range $field := .class.Fields]]
  [[- if valueInAnnotations $field "enumerationSource" -]]
  [[- else if hasEnumerations $field -]]
    [[- set $ "hasEnumerations" true]]
  [[- end ]]
[[- end -]]
func init() {
[[- if .hasEnumerations]]
    [[- range $field := .class.Fields]]
      [[- if valueInAnnotations $field "enumerationSource" -]]
      [[- else if hasEnumerations $field]]

  revel.TemplateFuncs["[[$field.Name]]_format"] = func(value [[gotype $field.Type]]) string {
    switch value {
      [[- range $eValue := $field.Restrictions.Enumerations]]
        [[- if eq $field.Type "byte"]]
    case '[[$eValue.Value]]':
      return "[[if $eValue.Label]][[$eValue.Label]][[else]][[$eValue.Value]][[end]]"
        [[- else if eq $field.Type "integer" "number" "biginteger" "int" "int64" "uint" "uint64" "float" "float64"]]
    case [[$eValue.Value]]:
      return "[[if $eValue.Label]][[$eValue.Label]][[else]][[$eValue.Value]][[end]]"
        [[- else]]
    case "[[$eValue.Value]]":
      return "[[if $eValue.Label]][[$eValue.Label]][[else]][[$eValue.Value]][[end]]"
        [[- end]]
      [[- end]]
    default:
      [[- if eq $field.Type "byte"]]
      return string(value)
      [[- else if eq $field.Type "string"]]
      return value
      [[- else if gotype $field.Type | eq "string"]]
      return value
      [[- else]]
      return fmt.Sprint(value)
      [[- end]]
    }
  }
      [[- end]]
    [[- end]]
[[- end]]
}


// [[.controllerName]] - 控制器
type [[.controllerName]] struct {
  [[if .baseController]][[.baseController]][[else]]*revel.Controller[[end]]
}

// Index 列出所有记录
func (c [[.controllerName]]) Index() revel.Result {
  var pageIndex, pageSize int
  c.Params.Bind(&pageIndex, "pageIndex")
  c.Params.Bind(&pageSize, "pageSize")
  if pageSize <= 0 {
    pageSize = toolbox.DEFAULT_SIZE_PER_PAGE
  }

  var cond orm.Cond
  var query string
  c.Params.Bind(&query, "query")
  if query != "" {
    cond = orm.Cond{"name LIKE": "%" + query + "%"}
  }

  total, err := c.Lifecycle.DB.[[.modelName]]().Where().And(cond).Count()
  if err != nil {
    c.Validation.Error(err.Error())
    return c.Render(err)
  }

  var [[camelizeDownFirst .modelName]] []models.[[.class.Name]]
  err = c.Lifecycle.DB.[[.modelName]]().Where().
    And(cond).
    Offset(pageIndex * pageSize).
    Limit(pageSize).
    All(&[[camelizeDownFirst .modelName]])
  if err != nil {
    c.Validation.Error(err.Error())
    return c.Render()
  }

[[if .class.BelongsTo -]]

  var [[camelizeDownFirst .modelName | singularize]]List = make([]map[string]interface{}, 0, len([[camelizeDownFirst .modelName]]))
  for idx := range [[camelizeDownFirst .modelName]] {
    [[camelizeDownFirst .modelName | singularize]]List = append([[camelizeDownFirst .modelName | singularize]]List, map[string]interface{}{
      "[[camelizeDownFirst .modelName | singularize]]": [[camelizeDownFirst .modelName]][idx],
    })
  }

  if len([[camelizeDownFirst .modelName]]) > 0 {
  [[- range $idx, $belongsTo := .class.BelongsTo -]]
  [[- $targetName := pluralize $belongsTo.Target -]]
  [[- $varName := camelizeDownFirst $belongsTo.Target]]

  [[- set $ "targetIsExists" false]]
  [[- range $sidx, $b := $.class.BelongsTo]]
    [[- if eq $belongsTo.Target $b.Target -]]
    [[- if lt $sidx $idx -]]
      [[- set $ "targetIsExists" true]]
    [[- end ]]
    [[- end ]]
  [[- end -]]

  [[- if not $.targetIsExists ]]
    var [[camelizeDownFirst $belongsTo.Target]]IDList = make([]int64, 0, len([[camelizeDownFirst $modelName]]))
  [[- else]]
    [[camelizeDownFirst $belongsTo.Target]]IDList = [[camelizeDownFirst $belongsTo.Target]]IDList[:0]
  [[- end]]
    for idx := range [[camelizeDownFirst $modelName]] {
      [[camelizeDownFirst $belongsTo.Target]]IDList = append([[camelizeDownFirst $belongsTo.Target]]IDList, [[camelizeDownFirst $modelName]][idx].[[$belongsTo.AttributeName false]])
    }

  [[- if not $.targetIsExists ]]
    var [[$varName]]List []models.[[$belongsTo.Target]]
  [[- else]]
    [[$varName]]List = nil
  [[- end]]
    err = c.Lifecycle.DB.[[$targetName]]().Where().
      And(orm.Cond{"id IN": [[camelizeDownFirst $belongsTo.Target]]IDList}).
      All(&[[$varName]]List)
    if err != nil {
      c.Validation.Error("load [[$belongsTo.Target]] fail, " + err.Error())
    } else {

      for idx := range [[$varName]]List {
        for vidx := range [[camelizeDownFirst $modelName]] {
          if [[$varName]]List[idx].ID == [[camelizeDownFirst $modelName]][vidx].[[$belongsTo.AttributeName false]] {
          [[camelizeDownFirst $modelName | singularize]]List[vidx]["[[$varName]]"] = [[$varName]]List[idx]
          }
        }
      }
    }
    [[- end]]
  }

  paginator := toolbox.NewPaginator(c.Request.Request, pageSize, total)
  c.ViewArgs["[[camelizeDownFirst .modelName]]"] = [[camelizeDownFirst .modelName | singularize]]List 
  return c.Render(paginator)
  [[- else]]

  paginator := toolbox.NewPaginator(c.Request.Request, pageSize, total)
  return c.Render([[camelizeDownFirst .modelName]], paginator)
  [[- end]]
}

[[set . "hasAsync" false]]
[[- range $column := .class.Fields]]
  [[- if hasFeature $column "async" -]]
    [[set $ "hasAsync" true]]
  [[- end ]]
[[- end -]]
[[- if .hasAsync]]
// IndexAsync 获取异步数据
func (c [[.controllerName]]) IndexAsync(id int64) revel.Result {
  return c.RenderError(errors.New("Not Impemented"))
}
[[- end]]

[[- if .class.BelongsTo -]]
  [[- range $idx, $belongsTo := .class.BelongsTo ]]
  [[- $targetName := pluralize $belongsTo.Target]]
  [[- $varName := camelizeDownFirst $targetName]]

func (c [[.controllerName]]) with[[$targetName]]() ([]models.[[$belongsTo.Target]], error) {
  var [[$varName]] []models.[[$belongsTo.Target]]
  err := c.Lifecycle.DB.[[$targetName]]().Where().
    All(&[[$varName]])
  if err != nil {
    c.Validation.Error("load [[$belongsTo.Target]] fail, " + err.Error())
    c.ViewArgs["[[$varName]]"] = []forms.InputChoice{{
      Value: "",
      Label: revel.Message(c.Request.Locale, "select.empty"),
    }}
    return nil, err
  }
  [[- $field := field $class $belongsTo.Name]]
  
  var opt[[$targetName]] = make([]forms.InputChoice, 0, len([[$varName]]))
  [[- if not $field.IsRequired]]
    opt[[$targetName]] = append(opt[[$targetName]], forms.InputChoice{
      Value: "",
      Label: revel.Message(c.Request.Locale, "select.empty"),
    })
  [[- end]]
  for _, o := range [[$varName]] {
    opt[[$targetName]] = append(opt[[$targetName]], forms.InputChoice{
      Value: strconv.FormatInt(int64(o.ID),10),
      Label: fmt.Sprint(o.[[displayForBelongsTo $field]]),
    })
  }
  c.ViewArgs["[[$varName]]"] = opt[[$targetName]]
  return [[$varName]], nil
}
  [[- end]][[/* range .class.BelongsTo */]]
[[- end]][[/* if .class.BelongsTo */]]

[[if newDisabled .class | not -]]
// New 编辑新建记录
func (c [[.controllerName]]) New() revel.Result {

[[- if .class.BelongsTo -]]
  [[- range $idx, $belongsTo := .class.BelongsTo ]]
  [[- $targetName := pluralize $belongsTo.Target]]
  c.with[[$targetName]]()
  [[- end]][[/* range .class.BelongsTo */]]
[[- end]][[/* if .class.BelongsTo */]]

  return c.Render()
}

// Create 创建记录
func (c [[.controllerName]]) Create([[camelizeDownFirst .class.Name]] *models.[[.class.Name]]) revel.Result {
  if [[camelizeDownFirst .class.Name]].Validate(c.Validation) {
    c.Validation.Keep()
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].New())
  }

  _, err := c.Lifecycle.DB.[[.modelName]]().Insert([[camelizeDownFirst .class.Name]])
  if err != nil {
    c.ErrorToFlash(err)
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].New())
  }

  c.Flash.Success(revel.Message(c.Request.Locale, "insert.success"))
  return c.Redirect(routes.[[.controllerName]].Index())
}
[[- end]]

[[if editDisabled .class | not -]]
// Edit 编辑指定 id 的记录
func (c [[.controllerName]]) Edit(id int64) revel.Result {
  var [[camelizeDownFirst .class.Name]] models.[[.class.Name]]
  err := c.Lifecycle.DB.[[.modelName]]().ID(id).Get(&[[camelizeDownFirst .class.Name]])
  if err != nil {
    if err == orm.ErrNotFound {
      c.Flash.Error(revel.Message(c.Request.Locale, "update.record_not_found"))
    } else {
      c.Flash.Error(err.Error())
    }
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Index())
  }

[[ if .class.BelongsTo -]]
  [[- range $idx, $belongsTo := .class.BelongsTo ]]
  [[- $targetName := pluralize $belongsTo.Target]]
  c.with[[$targetName]]()
  [[- end]][[/* range .class.BelongsTo */]]
[[- end]][[/* if .class.BelongsTo */]]
  return c.Render([[camelizeDownFirst .class.Name]])
}

// Update 按 id 更新记录
func (c [[.controllerName]]) Update(id int64, [[camelizeDownFirst .class.Name]] *models.[[.class.Name]]) revel.Result {
  if [[camelizeDownFirst .class.Name]].Validate(c.Validation) {
    c.Validation.Keep()
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Edit(id))
  }

  err := c.Lifecycle.DB.[[.modelName]]().ID(id).Update([[camelizeDownFirst .class.Name]])
  if err != nil {
    c.ErrorToFlash(err)
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Edit(id))
  }
  c.Flash.Success(revel.Message(c.Request.Locale, "update.success"))
  return c.Redirect(routes.[[.controllerName]].Index())
}
[[- end]]

[[if deleteDisabled .class | not -]]
[[if .class.PrimaryKey]]
// Delete 按 primaryKey 删除记录
func (c [[.controllerName]]) Delete([[- range $idx, $fieldName := .class.PrimaryKey]]
[[- $field := field $.class $fieldName]]
[[- if ne $idx 0]], [[end]][[$fieldName]] [[gotype $field.Type]]
[[- end]]) revel.Result {
  var cond = orm.Cond{}
[[- range $fieldName := .class.PrimaryKey]]
  [[- $field := field $.class $fieldName]]
  [[- if eq $field.Type "integer" "number" "biginteger" "int" "int8" "int16" "int32" "int64" "uint" "uint8" "uint16" "uint32" "uint64" "float" "float32" "float64"]]
    if [[$fieldName]] == 0 {
      c.Flash.Error("[[$fieldName]] is missing")
      return c.Redirect(routes.[[$.controllerName]].Index())
    }
  [[- else if eq $field.Type "datetime"]]
    if [[$fieldName]].IsZero() {
      c.Flash.Error("[[$fieldName]] is missing")
      return c.Redirect(routes.[[$.controllerName]].Index())
    } 
  [[- else if eq $field.Type "ipAddress" "ipaddress" "net.IP" "macAddress" "net.HardwareAddress"]]
    if [[$fieldName]] == nil {
      c.Flash.Error("[[$fieldName]] is missing")
      return c.Redirect(routes.[[$.controllerName]].Index())
    }
  [[- else]]
    if [[$fieldName]] == "" {
      c.Flash.Error("[[$fieldName]] is missing")
      return c.Redirect(routes.[[$.controllerName]].Index())
    }
  [[- end]]
  cond["[[$field.Name]]"] = [[$fieldName]]
[[- end]]

  rowsEffected, err :=  c.Lifecycle.DB.[[.modelName]]().Where(cond).Delete()
  if nil != err {
    if err == orm.ErrNotFound {
      c.Flash.Error(revel.Message(c.Request.Locale, "delete.record_not_found"))
    } else {
      c.Flash.Error(err.Error())
    }
  } else if rowsEffected <= 0 {
    c.Flash.Error(revel.Message(c.Request.Locale, "delete.record_not_found"))
  } else {
    c.Flash.Success(revel.Message(c.Request.Locale, "delete.success"))
  }
  return c.Redirect(routes.[[.controllerName]].Index())
}
[[else]]
// Delete 按 id 删除记录
func (c [[.controllerName]]) Delete(id int64) revel.Result {
  err :=  c.Lifecycle.DB.[[.modelName]]().ID(id).Delete()
  if nil != err {
    if err == orm.ErrNotFound {
      c.Flash.Error(revel.Message(c.Request.Locale, "delete.record_not_found"))
    } else {
      c.Flash.Error(err.Error())
    }
  } else {
    c.Flash.Success(revel.Message(c.Request.Locale, "delete.success"))
  }
  return c.Redirect(routes.[[.controllerName]].Index())
}

// DeleteByIDs 按 id 列表删除记录
func (c [[.controllerName]]) DeleteByIDs(id_list []int64) revel.Result {
  if len(id_list) == 0 {
    c.Flash.Error("请至少选择一条记录！")
    return c.Redirect(routes.[[.controllerName]].Index())
  }
  _, err :=  c.Lifecycle.DB.[[.modelName]]().Where().And(orm.Cond{"id IN": id_list}).Delete()
  if nil != err {
    c.Flash.Error(err.Error())
  } else {
    c.Flash.Success(revel.Message(c.Request.Locale, "delete.success"))
  }
  return c.Redirect(routes.[[.controllerName]].Index())
}
[[- end]]
[[- end]]