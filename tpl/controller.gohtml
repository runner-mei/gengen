import (
  "[[.projectPath]]/app"
  "[[.projectPath]]/app/libs"
  "[[.projectPath]]/app/models"
  "[[.projectPath]]/app/routes"

  "github.com/revel/revel"
  "github.com/three-plus-three/forms"
  "github.com/runner-mei/orm"
  "upper.io/db.v3"
)

// [[.controllerName]] - 控制器
type [[.controllerName]] struct {
  [[if .baseController]][[.baseController]][[else]]*revel.Controller[[end]]
}

// 列出所有记录
func (c [[.controllerName]]) Index(pageIndex int, pageSize int) revel.Result {
  //var exprs []db.Expr
  //if "" != name {
  //  exprs = append(exprs, models.[[.class.Name]]s.C.NAME.LIKE("%"+name+"%"))
  //}


  total, err := c.Lifecycle.DB.[[.modelName]]().Where().Count()
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Render(err)
  }

  if pageSize <= 0 {
    pageSize = libs.DEFAULT_SIZE_PER_PAGE
  }

  var [[camelizeDownFirst .modelName]] []models.[[.class.Name]]
  err = c.Lifecycle.DB.[[.modelName]]().Where().
    Offset(pageIndex * pageSize).
    Limit(pageSize).
    All(&[[camelizeDownFirst .modelName]])
  if err != nil {
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Render()
  }

  [[if .class.BelongsTo ]]
  var idList = make([]int64, 0, len([[camelizeDownFirst .modelName]]))
  for idx := range [[camelizeDownFirst .modelName]] {
    idList = append(idList, [[camelizeDownFirst .modelName]][idx].ID)
  }
  [[end]][[range $belongsTo := .class.BelongsTo ]]  
  [[$targetName := pluralize $belongsTo.Target]][[$varName := camelizeDownFirst $targetName]]var [[$varName]] []models.[[$belongsTo.Target]]
  err = c.Lifecycle.DB.[[$targetName]]().Where().
    And(orm.Cond{"id IN": idList}).
    All(&[[$varName]])
  if err != nil {
    c.Flash.Error("load [[$belongsTo.Target]] fail, " + err.Error())
    c.FlashParams()
  } else {
    var [[$varName]]ByID = make(map[int64]string, len([[$varName]]))
    for idx := range [[$varName]] {
      [[$varName]]ByID[ [[$varName]][idx].ID ] = [[$varName]][idx].Name
    }
    c.ViewArgs["[[$varName]]"] = [[$varName]]ByID
  }
  [[end]]

  paginator := libs.NewPaginator(c.Request.Request, pageSize, total)
  return c.Render([[camelizeDownFirst .modelName]], paginator)
}

// 编辑新建记录
func (c [[.controllerName]]) New() revel.Result {
  [[if .class.BelongsTo ]]var err error[[end]][[range $belongsTo := .class.BelongsTo ]]  
  [[$targetName := pluralize $belongsTo.Target]][[$varName := camelizeDownFirst $targetName]]var [[$varName]] []models.[[$belongsTo.Target]]
  err = c.Lifecycle.DB.[[$targetName]]().Where().
    All(&[[$varName]])
  if err != nil {
    c.Flash.Error("load [[$belongsTo.Target]] fail, " + err.Error())
    c.FlashParams()
    c.ViewArgs["[[$varName]]"] = []forms.InputChoice{}
  } else {
    var opt[[$targetName]] = make([]forms.InputChoice, 0, len([[$varName]]))
    for _, o := range [[$varName]] {
      opt[[$targetName]] = append(opt[[$targetName]], forms.InputChoice{
        Value: strconv.FormatInt(int64(o.ID),10),
        Label: o.Name,
      })
    }
    c.ViewArgs["[[$varName]]"] = opt[[$targetName]]
  }
  [[end]]

  return c.Render()
}

// 创建记录
func (c [[.controllerName]]) Create([[camelizeDownFirst .class.Name]] *models.[[.class.Name]]) revel.Result {
  if [[camelizeDownFirst .class.Name]].Validate(c.Validation) {
    c.Validation.Keep()
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].New())
  }

  _, err := c.Lifecycle.DB.[[.modelName]]().Insert([[camelizeDownFirst .class.Name]])
  if err != nil {
    if oerr, ok := err.(*orm.Error); ok {
      for _, validation := range oerr.Validations {
        c.Validation.Error(validation.Message).Key(models.KeyFor[[.modelName]](validation.Key))
      }
      c.Validation.Keep()
    }
    c.Flash.Error(err.Error())
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].New())
  }

  c.Flash.Success(revel.Message(c.Request.Locale, "insert.success"))
  return c.Redirect(routes.[[.controllerName]].Index(0, 0))
}

// 编辑指定 id 的记录
func (c [[.controllerName]]) Edit(id int64) revel.Result {
  var [[camelizeDownFirst .class.Name]] models.[[.class.Name]]
  err := c.Lifecycle.DB.[[.modelName]]().Id(id).Get(&[[camelizeDownFirst .class.Name]])
  if err != nil {
    if err == orm.ErrNotFound {
      c.Flash.Error(revel.Message(c.Request.Locale, "update.record_not_found"))
    } else {
      c.Flash.Error(err.Error())
    }
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Index(0, 0))
  }

  [[range $belongsTo := .class.BelongsTo ]]  
  [[$targetName := pluralize $belongsTo.Target]][[$varName := camelizeDownFirst $targetName]]var [[$varName]] []models.[[$belongsTo.Target]]
  err = c.Lifecycle.DB.[[$targetName]]().Where().
    All(&[[$varName]])
  if err != nil {
    c.Flash.Error("load [[$belongsTo.Target]] fail, " + err.Error())
    c.FlashParams()
    c.ViewArgs["[[$varName]]"] = []forms.InputChoice{}
  } else {
    var opt[[$targetName]] = make([]forms.InputChoice, 0, len([[$varName]]))
    for _, o := range [[$varName]] {
      opt[[$targetName]] = append(opt[[$targetName]], forms.InputChoice{
        Value: strconv.FormatInt(int64(o.ID),10),
        Label: o.Name,
      })
    }
    c.ViewArgs["[[$varName]]"] = opt[[$targetName]]
  }
  [[end]]

  return c.Render([[camelizeDownFirst .class.Name]])
}


// 按 id 更新记录
func (c [[.controllerName]]) Update([[camelizeDownFirst .class.Name]] *models.[[.class.Name]]) revel.Result {
  if [[camelizeDownFirst .class.Name]].Validate(c.Validation) {
    c.Validation.Keep()
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Edit(int64([[camelizeDownFirst .class.Name]].ID)))
  }

  err := c.Lifecycle.DB.[[.modelName]]().Id([[camelizeDownFirst .class.Name]].ID).Update([[camelizeDownFirst .class.Name]])
  if err != nil {
    if err == orm.ErrNotFound {
      c.Flash.Error(revel.Message(c.Request.Locale, "update.record_not_found"))
    } else {
      if oerr, ok := err.(*orm.Error); ok {
        for _, validation := range oerr.Validations {
          c.Validation.Error(validation.Message).Key(models.KeyFor[[.modelName]](validation.Key))
        }
        c.Validation.Keep()
      }
      c.Flash.Error(err.Error())
    }
    c.FlashParams()
    return c.Redirect(routes.[[.controllerName]].Edit(int64([[camelizeDownFirst .class.Name]].ID)))
  }
  c.Flash.Success(revel.Message(c.Request.Locale, "update.success"))
  return c.Redirect(routes.[[.controllerName]].Index(0, 0))
}

// 按 id 删除记录
func (c [[.controllerName]]) Delete(id int64) revel.Result {
  err :=  c.Lifecycle.DB.[[.modelName]]().Id(id).Delete()
  if nil != err {
    if err == orm.ErrNotFound {
      c.Flash.Error(revel.Message(c.Request.Locale, "delete.record_not_found"))
    } else {
      c.Flash.Error(err.Error())
    }
  } else {
    c.Flash.Success(revel.Message(c.Request.Locale, "delete.success"))
  }
  return c.Redirect([[.controllerName]].Index)
}

// 按 id 列表删除记录
func (c [[.controllerName]]) DeleteByIDs(id_list []int64) revel.Result {
  if len(id_list) == 0 {
    c.Flash.Error("请至少选择一条记录！")
    return c.Redirect([[.controllerName]].Index)
  }
  _, err :=  c.Lifecycle.DB.[[.modelName]]().Where().And(orm.Cond{"id IN": id_list}).Delete()
  if nil != err {
    c.Flash.Error(err.Error())
  } else {
    c.Flash.Success(revel.Message(c.Request.Locale, "delete.success"))
  }
  return c.Redirect([[.controllerName]].Index)
}